accessible: true
author: Guillaume Derval
context: |-
    The Greatest Common Divisor of two naturals \\(a\\) and \\(b\\) is the biggest natural such that the division of \\(a\\) and \\(b\\) by this natural is an entire division.

    Euclid found a very simple recursive algorithm to find the GCD of two numbers:
    $$\\text{gcd}(a,0) = a$$
    $$\\text{gcd}(a,b) = \\text{gcd}(b,a\\%b)$$

    Recall that the operator \\(\\%\\) returns the reminder of the euclidian division.
environment: default
groups: false
limits:
    memory: '100'
    output: '2'
    time: '30'
name: Day 1 - Greatest Common Divisor
network_grading: false
order: 4
problems:
    gcd:
        name: Implementation
        language: python
        header: Implement the function ``gcd(a,b)`` in Python.
        type: code
    multi:
        name: GCD of a list
        header: Using the function ``gcd(a,b)`` you defined earlier, define the function
            ``gcd_multi(a_list)``, which takes as input a non-empty list of natural,
            and returns the GCD of the list (the biggest natural \\(j\\) such that,
            for each element \\(i\\) in the list, \\(i\\%j==0\\)).
        language: python
        type: code
    multi_multi:
        name: List of GCD
        header: |-
            Using the function ``gcd(a,b)`` you defined earlier, define the function ``gcd_list(a_list)``, which:

            * Takes as input a non-empty list of naturals
            * Returns a list, such that the element \\(i\\) in the list is the GCD of the first \\(i\\) elements of ``a_list``.
        language: python
        type: code
weight: 1.0
